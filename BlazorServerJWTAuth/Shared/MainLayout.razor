@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Http
@using Authentication.Helpers

@inject IHttpContextAccessor  HttpContextAccesor
@inject IHttpClientFactory ClientFactory

<div class="sidebar">
    <NavMenu />
</div>

<div class="main">
    <div class="content px-4">
        @Body
    </div>
</div>

@code{

    protected override async Task OnInitializedAsync()
    {
        //Dicpose of UserIdentity
        UserIdentity.Dispose();

        // 1. Check for JWT token in cookies
        string jwtToken = String.Empty;
        HttpContextAccesor.HttpContext.Request.Cookies.TryGetValue(Settings.JWTCookieName, out jwtToken);

        if (!String.IsNullOrEmpty(jwtToken))
        {
            var jwtValidationResults = new DecodeAndValidateJwtTokenResults();
            jwtValidationResults = Authentication.Helpers.DecodeAndValidate.JwtToken(jwtToken, Settings.PublicKeyXmlString, Settings.JwtAudience, Settings.JwtIssuer);

            if (jwtValidationResults.isValid)
            {
                // 1a. Check if we need to refresh based on expiration time and next refresh check
                if (jwtValidationResults.ExpirationHours <= Settings.RefreshSessionHours)
                {
                    var refreshTokenEncrypted = String.Empty;
                    HttpContextAccesor.HttpContext.Request.Cookies.TryGetValue(Settings.RefreshTokenCookieName, out refreshTokenEncrypted);
                    var refreshToken = Authentication.Encryption.StringEncryption.DecryptString(refreshTokenEncrypted, Settings.RefreshTokenEncryptionPassPhrase);

                    // Attempt to refresh the token
                    var httpClient = ClientFactory.CreateClient();
                    var authClient = new Services.PlatformIdentityService.AuthenticationClient(Settings.IdentityServiceUri, httpClient);
                    var result = await authClient.RefreshTokenAsync(refreshToken);

                    if(result.IsSuccess)
                    {
                        jwtToken = result.JwtToken;
                        refreshToken = result.RefreshToken;
                        
                        
                        var uri = new Uri(NavigationManager.Uri)
                            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);

                        var query = $"?jwtToken={Uri.EscapeDataString(jwtToken)}&refreshToken={Uri.EscapeDataString(refreshToken)}&" +
                            $"redirectUrl={Uri.EscapeDataString(uri)}";

                            NavigationManager.NavigateTo("/authentication/refreshcookies" + query, forceLoad: true);
                    }
                }

                // 1b. Assign cookie data to UserIdentity and continue to single page application:
                UserIdentity.Login(jwtToken, jwtValidationResults.ClaimsPrincipal.Claims, Settings.RefreshSessionHours);


            }
            else if (jwtValidationResults.isExpired)
            {
                // Attempt to refresh the token
                var refreshTokenEncrypted = String.Empty;
                    HttpContextAccesor.HttpContext.Request.Cookies.TryGetValue(Settings.RefreshTokenCookieName, out refreshTokenEncrypted);
                    var refreshToken = Authentication.Encryption.StringEncryption.DecryptString(refreshTokenEncrypted, Settings.RefreshTokenEncryptionPassPhrase);

                    // Attempt to refresh the token
                    var httpClient = ClientFactory.CreateClient();
                    var authClient = new Services.PlatformIdentityService.AuthenticationClient(Settings.IdentityServiceUri, httpClient);
                    var result = await authClient.RefreshTokenAsync(refreshToken);

                    if(result.IsSuccess)
                    {
                        jwtToken = result.JwtToken;
                        refreshToken = result.RefreshToken;
                        
                        
                        var uri = new Uri(NavigationManager.Uri)
                            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);

                        var query = $"?jwtToken={Uri.EscapeDataString(jwtToken)}&refreshToken={Uri.EscapeDataString(refreshToken)}&" +
                            $"redirectUrl={Uri.EscapeDataString(uri)}";

                            NavigationManager.NavigateTo("/authentication/refreshcookies" + query, forceLoad: true);
                    }

            }
            else
            {
                // 2. Send user to login page:
                NavigationManager.NavigateTo("/login", forceLoad: true);
            }



        }
        else
        {
            // 2. Send user to login page:
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }

    }

}
