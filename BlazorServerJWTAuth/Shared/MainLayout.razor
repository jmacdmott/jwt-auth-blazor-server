@inherits LayoutComponentBase

@using Microsoft.AspNetCore.Http
@using Authentication.Helpers

@inject IHttpContextAccessor  HttpContextAccesor
@inject IHttpClientFactory ClientFactory

<div class="sidebar">
    <NavMenu />
</div>

<div class="main">
    <div class="content px-4">
        @Body
    </div>
</div>

@code{

    private string loginUrl = "/login";

    protected override async Task OnInitializedAsync()
    {

        //Dicpose of UserIdentity
        UserIdentity.Dispose();

        // 1. Check for JWT token in cookies
        string jwtToken = String.Empty;
        HttpContextAccesor.HttpContext.Request.Cookies.TryGetValue(Settings.JWTCookieName, out jwtToken);

        if (String.IsNullOrEmpty(jwtToken))
        {
            // No Cookies with JWT Token Exist - Send user to login page:
            NavigationManager.NavigateTo(loginUrl);
        }

        // Decode and validate JWT Token:
        var jwtValidationResults = new DecodeAndValidateJwtTokenResults();
        jwtValidationResults = Authentication.Helpers.DecodeAndValidate.JwtToken(jwtToken, Settings.PublicKeyXmlString, Settings.JwtAudience, Settings.JwtIssuer);

        if (jwtValidationResults.isValid)
        {
            // Check if our token will expire before next refresh check
            if (jwtValidationResults.ExpirationHours <= Settings.SessionRefreshHours)
            {
                #region Refresh Token

                var refreshTokenEncrypted = String.Empty;
                HttpContextAccesor.HttpContext.Request.Cookies.TryGetValue(Settings.RefreshTokenCookieName, out refreshTokenEncrypted);
                var refreshToken = Authentication.Encryption.StringEncryption.DecryptString(refreshTokenEncrypted, Settings.RefreshTokenEncryptionPassPhrase);

                // Attempt to refresh the token
                var httpClient = ClientFactory.CreateClient();
                var authClient = new Services.PlatformIdentityService.AuthenticationClient(Settings.IdentityServiceUri, httpClient);
                var result = await authClient.RefreshTokenAsync(refreshToken);

                if (result.IsSuccess)
                {
                    jwtToken = result.JwtToken;
                    refreshToken = result.RefreshToken;

                    var uri = new Uri(NavigationManager.Uri)
                        .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);

                    var query = $"?jwtToken={Uri.EscapeDataString(jwtToken)}&refreshToken={Uri.EscapeDataString(refreshToken)}&" +
                        $"redirectUrl={Uri.EscapeDataString(uri)}";

                    NavigationManager.NavigateTo("/authentication/refreshcookies" + query, forceLoad: true);
                }

                #endregion

            }

            // Assign cookie data to UserIdentity and continue to single page application:
            UserIdentity.Login(jwtToken, jwtValidationResults.ClaimsPrincipal.Claims, jwtValidationResults.ExpirationTime, Settings.SessionRefreshHours);

            // Handle TokenRefreshRequired Event 
            UserIdentity.TokenRefreshRequired += RefreshTokenEventHandler;

        }
        else if (jwtValidationResults.isExpired)
        {
            #region Refresh Token

            var refreshTokenEncrypted = String.Empty;
            HttpContextAccesor.HttpContext.Request.Cookies.TryGetValue(Settings.RefreshTokenCookieName, out refreshTokenEncrypted);
            var refreshToken = Authentication.Encryption.StringEncryption.DecryptString(refreshTokenEncrypted, Settings.RefreshTokenEncryptionPassPhrase);

            // Attempt to refresh the token
            var httpClient = ClientFactory.CreateClient();
            var authClient = new Services.PlatformIdentityService.AuthenticationClient(Settings.IdentityServiceUri, httpClient);
            var result = await authClient.RefreshTokenAsync(refreshToken);

            if (result.IsSuccess)
            {
                jwtToken = result.JwtToken;
                refreshToken = result.RefreshToken;


                var uri = new Uri(NavigationManager.Uri)
                    .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);

                var query = $"?jwtToken={Uri.EscapeDataString(jwtToken)}&refreshToken={Uri.EscapeDataString(refreshToken)}&" +
                    $"redirectUrl={Uri.EscapeDataString(uri)}";

                NavigationManager.NavigateTo("/authentication/refreshcookies" + query, forceLoad: true);
            }
            else
            {
                // Send user to login page:
                NavigationManager.NavigateTo(loginUrl);
            }

            #endregion

        }
        else
        {
            // Send user to login page:
            NavigationManager.NavigateTo(loginUrl);
        }

    }

    // If during this session the UserIdentity requires a refresh token we listen for the event and hard refresh the page using current URL
    public async void RefreshTokenEventHandler(object sender, EventArgs args)
    {
        try
        {
            // We wrap this in a try/catch in case server pre-rendring is on.
            // Initial pre-render step may throw an exception on NULL NavigationManager

            Console.WriteLine("Handling refresh event from UserIdentity.");

            var uri = new Uri(NavigationManager.Uri)
                .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);

            NavigationManager.NavigateTo(uri, forceLoad: true);
        }catch
        {

        }

    }
}
